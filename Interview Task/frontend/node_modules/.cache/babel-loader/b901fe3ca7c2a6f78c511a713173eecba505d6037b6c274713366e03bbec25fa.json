{"ast":null,"code":"var _jsxFileName = \"/Users/jameschapman/Documents/Interview Task/frontend/src/DownloadResults.tsx\";\nimport React from 'react';\nimport { Button } from '@mui/material';\nimport { saveAs } from 'file-saver';\n\n// I couldn't figure out how to correctly download the validation results.\n\n// Trying to get the data in from when user clicks Validate\n// Sort of now just trying to hardcode the data so that I can format CSV\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DownloadResults = ({\n  phoneDetails\n}) => {\n  const downloadCSV = () => {\n    let csvContent = \"data:text/csv;charset=utf-8,\";\n\n    // Headers for the CSV File\n    const headers = \"IsValid, IsPossible, PhoneType, InternationalFormat\\n\";\n    csvContent += headers;\n\n    // Check if phone number details are available\n    if (phoneDetails) {\n      const csvRow = [phoneDetails.isValid, phoneDetails.isPossible, phoneDetails.phoneType, phoneDetails.internationalFormat].join(\",\");\n      csvContent += csvRow + \"\\n\";\n    }\n    // Making blob to save csv file\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    saveAs(blob, \"fileValidationDetails.csv\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: downloadCSV,\n      disabled: !phoneDetails,\n      children: \"Download CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_c = DownloadResults;\nexport default DownloadResults;\nvar _c;\n$RefreshReg$(_c, \"DownloadResults\");","map":{"version":3,"names":["React","Button","saveAs","jsxDEV","_jsxDEV","DownloadResults","phoneDetails","downloadCSV","csvContent","headers","csvRow","isValid","isPossible","phoneType","internationalFormat","join","blob","Blob","type","children","variant","color","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jameschapman/Documents/Interview Task/frontend/src/DownloadResults.tsx"],"sourcesContent":["import React from 'react';\nimport { Button } from '@mui/material';\nimport { saveAs } from 'file-saver';\n\n// I couldn't figure out how to correctly download the validation results.\n\n// Trying to get the data in from when user clicks Validate\ninterface PhoneNumberDetails {\n    isValid: boolean;\n    isPossible: boolean;\n    phoneType: string;\n    internationalFormat: string;\n}\n// Sort of now just trying to hardcode the data so that I can format CSV\ninterface DownloadResultsProps {\n    phoneDetails: PhoneNumberDetails | null;\n}\n\nconst DownloadResults: React.FC<DownloadResultsProps> = ({ phoneDetails }) => {\n\n    const downloadCSV = () => {\n        let csvContent = \"data:text/csv;charset=utf-8,\";\n\n        // Headers for the CSV File\n        const headers = \"IsValid, IsPossible, PhoneType, InternationalFormat\\n\";\n        csvContent += headers;\n\n        // Check if phone number details are available\n        if (phoneDetails) {\n            const csvRow = [\n                phoneDetails.isValid,\n                phoneDetails.isPossible,\n                phoneDetails.phoneType,\n                phoneDetails.internationalFormat\n            ].join(\",\");\n            csvContent += csvRow + \"\\n\";\n        }\n        // Making blob to save csv file\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        saveAs(blob, \"fileValidationDetails.csv\");\n    };\n\n    return (\n        <div>\n            <Button variant=\"contained\" color=\"primary\" onClick={downloadCSV} disabled={!phoneDetails}>\n                Download CSV\n            </Button>\n        </div>\n    );\n}\n\nexport default DownloadResults;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,MAAM,QAAQ,YAAY;;AAEnC;;AAEA;AAOA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,eAA+C,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAE1E,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIC,UAAU,GAAG,8BAA8B;;IAE/C;IACA,MAAMC,OAAO,GAAG,uDAAuD;IACvED,UAAU,IAAIC,OAAO;;IAErB;IACA,IAAIH,YAAY,EAAE;MACd,MAAMI,MAAM,GAAG,CACXJ,YAAY,CAACK,OAAO,EACpBL,YAAY,CAACM,UAAU,EACvBN,YAAY,CAACO,SAAS,EACtBP,YAAY,CAACQ,mBAAmB,CACnC,CAACC,IAAI,CAAC,GAAG,CAAC;MACXP,UAAU,IAAIE,MAAM,GAAG,IAAI;IAC/B;IACA;IACA,MAAMM,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACT,UAAU,CAAC,EAAE;MAAEU,IAAI,EAAE;IAA0B,CAAC,CAAC;IACxEhB,MAAM,CAACc,IAAI,EAAE,2BAA2B,CAAC;EAC7C,CAAC;EAED,oBACIZ,OAAA;IAAAe,QAAA,eACIf,OAAA,CAACH,MAAM;MAACmB,OAAO,EAAC,WAAW;MAACC,KAAK,EAAC,SAAS;MAACC,OAAO,EAAEf,WAAY;MAACgB,QAAQ,EAAE,CAACjB,YAAa;MAAAa,QAAA,EAAC;IAE3F;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAAAC,EAAA,GA/BKvB,eAA+C;AAiCrD,eAAeA,eAAe;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}