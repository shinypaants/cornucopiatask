{"ast":null,"code":"var _jsxFileName = \"/Users/jameschapman/Documents/Interview Task/frontend/src/DownloadResults.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button } from '@mui/material';\nimport { saveAs } from 'file-saver';\n\n// Define the interface for the data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DownloadResults = () => {\n  _s();\n  // Now TypeScript knows what type of data the array will hold\n  const [data, setData] = useState([]);\n  const downloadCSV = () => {\n    let csvContent = \"data:text/csv;charset=utf-8,\";\n\n    // Add your CSV header\n    const headers = \"Phone Number,IsValid, IsPossible, PhoneType, InternationalFormat\\n\";\n    csvContent += headers;\n\n    // Add the rows\n    data.forEach(row => {\n      const csvRow = [row.phoneNumber, row.isValid].join(\",\");\n      csvContent += csvRow + \"\\n\";\n    });\n\n    // Create a Blob and trigger the download\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    saveAs(blob, \"validationResults.csv\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: downloadCSV,\n      children: \"Download CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(DownloadResults, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n_c = DownloadResults;\nexport default DownloadResults;\nvar _c;\n$RefreshReg$(_c, \"DownloadResults\");","map":{"version":3,"names":["React","useState","Button","saveAs","jsxDEV","_jsxDEV","DownloadResults","_s","data","setData","downloadCSV","csvContent","headers","forEach","row","csvRow","phoneNumber","isValid","join","blob","Blob","type","children","variant","color","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jameschapman/Documents/Interview Task/frontend/src/DownloadResults.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button } from '@mui/material';\nimport { saveAs } from 'file-saver';\n\n// Define the interface for the data\ninterface ValidationData {\n    phoneNumber: string;\n    isValid: boolean;\n}\n\nconst DownloadResults = () => {\n    // Now TypeScript knows what type of data the array will hold\n    const [data, setData] = useState<ValidationData[]>([]);\n\n    const downloadCSV = () => {\n        let csvContent = \"data:text/csv;charset=utf-8,\";\n\n        // Add your CSV header\n        const headers = \"Phone Number,IsValid, IsPossible, PhoneType, InternationalFormat\\n\";\n        csvContent += headers;\n\n        // Add the rows\n        data.forEach(row => {\n            const csvRow = [row.phoneNumber, row.isValid].join(\",\");\n            csvContent += csvRow + \"\\n\";\n        });\n\n        // Create a Blob and trigger the download\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        saveAs(blob, \"validationResults.csv\");\n    };\n\n    return (\n        <div>\n            <Button variant=\"contained\" color=\"primary\" onClick={downloadCSV}>\n                Download CSV\n            </Button>\n        </div>\n    );\n}\n\nexport default DownloadResults;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,MAAM,QAAQ,YAAY;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAmB,EAAE,CAAC;EAEtD,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIC,UAAU,GAAG,8BAA8B;;IAE/C;IACA,MAAMC,OAAO,GAAG,oEAAoE;IACpFD,UAAU,IAAIC,OAAO;;IAErB;IACAJ,IAAI,CAACK,OAAO,CAACC,GAAG,IAAI;MAChB,MAAMC,MAAM,GAAG,CAACD,GAAG,CAACE,WAAW,EAAEF,GAAG,CAACG,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MACvDP,UAAU,IAAII,MAAM,GAAG,IAAI;IAC/B,CAAC,CAAC;;IAEF;IACA,MAAMI,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACT,UAAU,CAAC,EAAE;MAAEU,IAAI,EAAE;IAA0B,CAAC,CAAC;IACxElB,MAAM,CAACgB,IAAI,EAAE,uBAAuB,CAAC;EACzC,CAAC;EAED,oBACId,OAAA;IAAAiB,QAAA,eACIjB,OAAA,CAACH,MAAM;MAACqB,OAAO,EAAC,WAAW;MAACC,KAAK,EAAC,SAAS;MAACC,OAAO,EAAEf,WAAY;MAAAY,QAAA,EAAC;IAElE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAAAtB,EAAA,CA7BKD,eAAe;AAAAwB,EAAA,GAAfxB,eAAe;AA+BrB,eAAeA,eAAe;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}