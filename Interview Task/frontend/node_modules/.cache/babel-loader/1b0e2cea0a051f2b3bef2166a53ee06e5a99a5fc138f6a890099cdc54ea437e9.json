{"ast":null,"code":"var _jsxFileName = \"/Users/jameschapman/Documents/Git /Interview Task/frontend/src/PhoneValidation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PhoneValidation() {\n  _s();\n  // Using useState('') so that the values can be set\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [countryCode, setCountryCode] = useState('');\n  const [validationResult, setValidationResult] = useState('');\n  const [phoneType, setPhoneType] = useState('');\n  const [internationalFormat, setInternationalFormat] = useState('');\n\n  // I was a bit stuck on how to make it use phone type and international format but tried to implement it either way on how it would look.\n\n  const validatePhoneNumber = async () => {\n    // using try and catch to make sure that it uses axios to retrieve data from backend\n    try {\n      const response = await axios.get(`/phone/validate?phoneNumber=${phoneNumber}&countryCode=${countryCode}`);\n      setValidationResult(response.data.isValid ? 'Valid' : 'Invalid');\n      if (response) {\n        setPhoneType(response.data.phoneType ? 'Mobile' : 'Home Phone');\n        setInternationalFormat(response.data.internationalFormat);\n      }\n    } catch (error) {\n      setValidationResult('Error validating phone number');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Validate Phone Number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: phoneNumber,\n      onChange: e => setPhoneNumber(e.target.value),\n      placeholder: \"Phone Number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: countryCode,\n      onChange: e => setCountryCode(e.target.value),\n      placeholder: \"Country Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validatePhoneNumber,\n      children: \"Validate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Is Valid: \", validationResult]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Is Possible: \", validationResult]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Phone Type: \", phoneType]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"International Format: \", internationalFormat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(PhoneValidation, \"ikz9A5S7F2VNRnIFbyMSU/D/xBk=\");\n_c = PhoneValidation;\nexport default PhoneValidation;\nvar _c;\n$RefreshReg$(_c, \"PhoneValidation\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","PhoneValidation","_s","phoneNumber","setPhoneNumber","countryCode","setCountryCode","validationResult","setValidationResult","phoneType","setPhoneType","internationalFormat","setInternationalFormat","validatePhoneNumber","response","get","data","isValid","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/jameschapman/Documents/Git /Interview Task/frontend/src/PhoneValidation.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction PhoneValidation() {\n    // Using useState('') so that the values can be set\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [countryCode, setCountryCode] = useState('');\n    const [validationResult, setValidationResult] = useState('');\n    const [phoneType, setPhoneType] = useState('');\n    const [internationalFormat, setInternationalFormat] = useState('');\n\n    // I was a bit stuck on how to make it use phone type and international format but tried to implement it either way on how it would look.\n\n    const validatePhoneNumber = async () => {\n        // using try and catch to make sure that it uses axios to retrieve data from backend\n        try {\n            const response = await axios.get(`/phone/validate?phoneNumber=${phoneNumber}&countryCode=${countryCode}`);\n            setValidationResult(response.data.isValid ? 'Valid' : 'Invalid');\n            if (response){\n                setPhoneType(response.data.phoneType ? 'Mobile' : 'Home Phone');\n                setInternationalFormat(response.data.internationalFormat)\n            }\n        } catch (error) {\n            setValidationResult('Error validating phone number');\n        }\n    };\n\n    return (\n        <div>\n            <h2>Validate Phone Number</h2>\n            <input type=\"text\" value={phoneNumber} onChange={e => setPhoneNumber(e.target.value)} placeholder=\"Phone Number\" />\n            <input type=\"text\" value={countryCode} onChange={e => setCountryCode(e.target.value)} placeholder=\"Country Code\" />\n            <button onClick={validatePhoneNumber}>Validate</button>\n            <h4>Results</h4>\n            <p>Is Valid: {validationResult}</p>\n            <p>Is Possible: {validationResult}</p>\n            <p>Phone Type: {phoneType}</p>\n            <p>International Format: {internationalFormat}</p>\n        </div>\n    );\n}\n\nexport default PhoneValidation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}