{"ast":null,"code":"var _jsxFileName = \"/Users/jameschapman/Documents/Interview Task/frontend/src/PhoneValidation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PhoneValidation() {\n  _s();\n  // Using useState('') so that the values can be set\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [countryCode, setCountryCode] = useState('');\n  const [validationResult, setValidationResult] = useState('');\n  const validatePhoneNumber = async () => {\n    // using try and catch to make sure that it uses axios to retrieve data from backend\n    try {\n      const response = await axios.get(`/phone/validate?phoneNumber=${phoneNumber}&countryCode=${countryCode}`);\n      setValidationResult(response.data.isValid ? 'Valid' : 'Invalid');\n    } catch (error) {\n      setValidationResult('Error validating phone number');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Validate Phone Number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: phoneNumber,\n      onChange: e => setPhoneNumber(e.target.value),\n      placeholder: \"Phone Number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: countryCode,\n      onChange: e => setCountryCode(e.target.value),\n      placeholder: \"Country Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validatePhoneNumber,\n      children: \"Validate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Result: \", validationResult]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(PhoneValidation, \"bJMF9rAdzAVURIx5HUTk5W+Oj6M=\");\n_c = PhoneValidation;\nexport default PhoneValidation;\nvar _c;\n$RefreshReg$(_c, \"PhoneValidation\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","PhoneValidation","_s","phoneNumber","setPhoneNumber","countryCode","setCountryCode","validationResult","setValidationResult","validatePhoneNumber","response","get","data","isValid","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/jameschapman/Documents/Interview Task/frontend/src/PhoneValidation.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction PhoneValidation() {\n    // Using useState('') so that the values can be set\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [countryCode, setCountryCode] = useState('');\n    const [validationResult, setValidationResult] = useState('');\n\n    const validatePhoneNumber = async () => {\n        // using try and catch to make sure that it uses axios to retrieve data from backend\n        try {\n            const response = await axios.get(`/phone/validate?phoneNumber=${phoneNumber}&countryCode=${countryCode}`);\n            setValidationResult(response.data.isValid ? 'Valid' : 'Invalid');\n        } catch (error) {\n            setValidationResult('Error validating phone number');\n        }\n    };\n\n    return (\n        <div>\n            <h2>Validate Phone Number</h2>\n            <input type=\"text\" value={phoneNumber} onChange={e => setPhoneNumber(e.target.value)} placeholder=\"Phone Number\" />\n            <input type=\"text\" value={countryCode} onChange={e => setCountryCode(e.target.value)} placeholder=\"Country Code\" />\n            <button onClick={validatePhoneNumber}>Validate</button>\n            <p>Result: {validationResult}</p>\n        </div>\n    );\n}\n\nexport default PhoneValidation;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAMY,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC;IACA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAE,+BAA8BR,WAAY,gBAAeE,WAAY,EAAC,CAAC;MACzGG,mBAAmB,CAACE,QAAQ,CAACE,IAAI,CAACC,OAAO,GAAG,OAAO,GAAG,SAAS,CAAC;IACpE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZN,mBAAmB,CAAC,+BAA+B,CAAC;IACxD;EACJ,CAAC;EAED,oBACIR,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BnB,OAAA;MAAOoB,IAAI,EAAC,MAAM;MAACC,KAAK,EAAElB,WAAY;MAACmB,QAAQ,EAAEC,CAAC,IAAInB,cAAc,CAACmB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAACI,WAAW,EAAC;IAAc;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnHnB,OAAA;MAAOoB,IAAI,EAAC,MAAM;MAACC,KAAK,EAAEhB,WAAY;MAACiB,QAAQ,EAAEC,CAAC,IAAIjB,cAAc,CAACiB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAACI,WAAW,EAAC;IAAc;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnHnB,OAAA;MAAQ0B,OAAO,EAAEjB,mBAAoB;MAAAM,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvDnB,OAAA;MAAAe,QAAA,GAAG,UAAQ,EAACR,gBAAgB;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEd;AAACjB,EAAA,CAzBQD,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AA2BxB,eAAeA,eAAe;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}